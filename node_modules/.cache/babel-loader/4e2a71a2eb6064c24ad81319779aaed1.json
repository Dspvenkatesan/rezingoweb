{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { ClientAuthError } from \"./error/ClientAuthError\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * @hidden\n */\n\nvar ClientInfo =\n/** @class */\nfunction () {\n  function ClientInfo(rawClientInfo, authority) {\n    if (!rawClientInfo || StringUtils.isEmpty(rawClientInfo)) {\n      this.uid = \"\";\n      this.utid = \"\";\n      return;\n    }\n\n    try {\n      var decodedClientInfo = CryptoUtils.base64Decode(rawClientInfo);\n      var clientInfo = JSON.parse(decodedClientInfo);\n\n      if (clientInfo) {\n        if (clientInfo.hasOwnProperty(\"uid\")) {\n          this.uid = authority ? ClientInfo.stripPolicyFromUid(clientInfo.uid, authority) : clientInfo.uid;\n        }\n\n        if (clientInfo.hasOwnProperty(\"utid\")) {\n          this.utid = clientInfo.utid;\n        }\n      }\n    } catch (e) {\n      throw ClientAuthError.createClientInfoDecodingError(e);\n    }\n  }\n\n  Object.defineProperty(ClientInfo.prototype, \"uid\", {\n    get: function get() {\n      return this._uid ? this._uid : \"\";\n    },\n    set: function set(uid) {\n      this._uid = uid;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClientInfo.prototype, \"utid\", {\n    get: function get() {\n      return this._utid ? this._utid : \"\";\n    },\n    set: function set(utid) {\n      this._utid = utid;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ClientInfo.createClientInfoFromIdToken = function (idToken, authority) {\n    var clientInfo = {\n      uid: idToken.subject,\n      utid: \"\"\n    };\n    return new ClientInfo(CryptoUtils.base64Encode(JSON.stringify(clientInfo)), authority);\n  };\n\n  ClientInfo.stripPolicyFromUid = function (uid, authority) {\n    var uidSegments = uid.split(\"-\"); // Reverse the url segments so the last one is more easily accessible\n\n    var urlSegments = authority.split(\"/\").reverse();\n    var policy = \"\";\n\n    if (!StringUtils.isEmpty(urlSegments[0])) {\n      policy = urlSegments[0];\n    } else if (urlSegments.length > 1) {\n      // If the original url had a trailing slash, urlSegments[0] would be \"\" so take the next element\n      policy = urlSegments[1];\n    }\n\n    if (uidSegments[uidSegments.length - 1] === policy) {\n      // If the last segment of uid matches the last segment of authority url, remove the last segment of uid\n      return uidSegments.slice(0, uidSegments.length - 1).join(\"-\");\n    }\n\n    return uid;\n  };\n\n  ClientInfo.prototype.encodeClientInfo = function () {\n    var clientInfo = JSON.stringify({\n      uid: this.uid,\n      utid: this.utid\n    });\n    return CryptoUtils.base64Encode(clientInfo);\n  };\n\n  return ClientInfo;\n}();\n\nexport { ClientInfo };","map":null,"metadata":{},"sourceType":"module"}