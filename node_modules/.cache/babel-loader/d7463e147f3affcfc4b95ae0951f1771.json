{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { ClientConfigurationErrorMessage, ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { XhrClient } from \"../XHRClient\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nimport { TrustedAuthority } from \"./TrustedAuthority\";\nimport { NetworkRequestType, Constants, WELL_KNOWN_SUFFIX } from \"../utils/Constants\";\n/**\n * @hidden\n */\n\nexport var AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Default\"] = 0] = \"Default\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n})(AuthorityType || (AuthorityType = {}));\n/**\n * @hidden\n */\n\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, validateAuthority, authorityMetadata) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n    this.tenantDiscoveryResponse = authorityMetadata;\n  }\n\n  Authority.isAdfs = function (authorityUrl) {\n    var components = UrlUtils.GetUrlComponents(authorityUrl);\n    var pathSegments = components.PathSegments;\n    return pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS;\n  };\n\n  Object.defineProperty(Authority.prototype, \"AuthorityType\", {\n    get: function get() {\n      return Authority.isAdfs(this.canonicalAuthority) ? AuthorityType.Adfs : AuthorityType.Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function get() {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function get() {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function get() {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function get() {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(/{tenant}|{tenantid}/g, this.Tenant);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Authority.prototype.validateResolved = function () {\n    if (!this.hasCachedMetadata()) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /**\n     * A URL that is the authority set by the developer\n     */\n    get: function get() {\n      return this.canonicalAuthority;\n    },\n    set: function set(url) {\n      this.canonicalAuthority = UrlUtils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function get() {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = UrlUtils.GetUrlComponents(this.CanonicalAuthority);\n      }\n\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n    get: function get() {\n      return this.AuthorityType === AuthorityType.Adfs ? \"\" + this.CanonicalAuthority + WELL_KNOWN_SUFFIX : this.CanonicalAuthority + \"v2.0/\" + WELL_KNOWN_SUFFIX;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Given a string, validate that it is of the form https://domain/path\n   */\n\n  Authority.prototype.validateAsUri = function () {\n    var components;\n\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ClientConfigurationErrorMessage.invalidAuthorityType;\n    }\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationErrorMessage.authorityUriInsecure;\n    }\n\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ClientConfigurationErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /**\n   * Calls the OIDC endpoint and returns the response\n   */\n\n\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint, telemetryManager, correlationId) {\n    var client = new XhrClient();\n    var httpMethod = NetworkRequestType.GET;\n    var httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, openIdConfigurationEndpoint, \"openIdConfigurationEndpoint\");\n    return client.sendRequestAsync(openIdConfigurationEndpoint, httpMethod,\n    /* enableCaching: */\n    true).then(function (response) {\n      httpEvent.httpResponseStatus = response.statusCode;\n      telemetryManager.stopEvent(httpEvent);\n      return {\n        AuthorizationEndpoint: response.body[\"authorization_endpoint\"],\n        EndSessionEndpoint: response.body[\"end_session_endpoint\"],\n        Issuer: response.body[\"issuer\"]\n      };\n    }).catch(function (err) {\n      httpEvent.serverErrorCode = err;\n      telemetryManager.stopEvent(httpEvent);\n      throw err;\n    });\n  };\n  /**\n   * Returns a promise.\n   * Checks to see if the authority is in the cache\n   * Discover endpoints via openid-configuration\n   * If successful, caches the endpoint for later use in OIDC\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function (telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var host, openIdConfigurationEndpointResponse, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!this.IsValidationEnabled) return [3\n            /*break*/\n            , 3];\n            host = this.canonicalAuthorityUrlComponents.HostNameAndPort;\n            if (!(TrustedAuthority.getTrustedHostList().length === 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , TrustedAuthority.setTrustedAuthoritiesFromNetwork(this.canonicalAuthority, telemetryManager, correlationId)];\n\n          case 1:\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            if (!TrustedAuthority.IsInTrustedHostList(host)) {\n              throw ClientConfigurationError.createUntrustedAuthorityError(host);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            openIdConfigurationEndpointResponse = this.GetOpenIdConfigurationEndpoint();\n            _a = this;\n            return [4\n            /*yield*/\n            , this.DiscoverEndpoints(openIdConfigurationEndpointResponse, telemetryManager, correlationId)];\n\n          case 4:\n            _a.tenantDiscoveryResponse = _b.sent();\n            return [2\n            /*return*/\n            , this.tenantDiscoveryResponse];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if there is a cached tenant discovery response with required fields.\n   */\n\n\n  Authority.prototype.hasCachedMetadata = function () {\n    return !!(this.tenantDiscoveryResponse && this.tenantDiscoveryResponse.AuthorizationEndpoint && this.tenantDiscoveryResponse.EndSessionEndpoint && this.tenantDiscoveryResponse.Issuer);\n  };\n  /**\n   * Returns a promise which resolves to the OIDC endpoint\n   * Only responds with the endpoint\n   */\n\n\n  Authority.prototype.GetOpenIdConfigurationEndpoint = function () {\n    return this.DefaultOpenIdConfigurationEndpoint;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":null,"metadata":{},"sourceType":"module"}