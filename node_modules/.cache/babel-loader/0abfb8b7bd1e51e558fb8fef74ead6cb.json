{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __assign } from \"tslib\";\nimport { Constants, PromptState, BlacklistedEQParams } from \"./Constants\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ScopeSet } from \"../ScopeSet\";\nimport { StringUtils } from \"./StringUtils\";\nimport { CryptoUtils } from \"./CryptoUtils\";\nimport { TimeUtils } from \"./TimeUtils\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\n/**\n * @hidden\n */\n\nvar RequestUtils =\n/** @class */\nfunction () {\n  function RequestUtils() {}\n  /**\n   * @ignore\n   *\n   * @param request\n   * @param isLoginCall\n   * @param cacheStorage\n   * @param clientId\n   *\n   * validates all request parameters and generates a consumable request object\n   */\n\n\n  RequestUtils.validateRequest = function (request, isLoginCall, clientId, interactionType) {\n    // Throw error if request is empty for acquire * calls\n    if (!isLoginCall && !request) {\n      throw ClientConfigurationError.createEmptyRequestError();\n    }\n\n    var scopes;\n    var extraQueryParameters;\n\n    if (request) {\n      // if extraScopesToConsent is passed in loginCall, append them to the login request; Validate and filter scopes (the validate function will throw if validation fails)\n      scopes = isLoginCall ? ScopeSet.appendScopes(request.scopes, request.extraScopesToConsent) : request.scopes;\n      ScopeSet.validateInputScope(scopes, !isLoginCall);\n      scopes = ScopeSet.translateClientIdIfSingleScope(scopes, clientId); // validate prompt parameter\n\n      this.validatePromptParameter(request.prompt); // validate extraQueryParameters\n\n      extraQueryParameters = this.validateEQParameters(request.extraQueryParameters, request.claimsRequest); // validate claimsRequest\n\n      this.validateClaimsRequest(request.claimsRequest);\n    } // validate and generate state and correlationId\n\n\n    var state = this.validateAndGenerateState(request && request.state, interactionType);\n    var correlationId = this.validateAndGenerateCorrelationId(request && request.correlationId);\n\n    var validatedRequest = __assign(__assign({}, request), {\n      extraQueryParameters: extraQueryParameters,\n      scopes: scopes,\n      state: state,\n      correlationId: correlationId\n    });\n\n    return validatedRequest;\n  };\n  /**\n   * @ignore\n   *\n   * Utility to test if valid prompt value is passed in the request\n   * @param request\n   */\n\n\n  RequestUtils.validatePromptParameter = function (prompt) {\n    if (prompt) {\n      if ([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) < 0) {\n        throw ClientConfigurationError.createInvalidPromptError(prompt);\n      }\n    }\n  };\n  /**\n   * @ignore\n   *\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\n   * @param request\n   */\n\n\n  RequestUtils.validateEQParameters = function (extraQueryParameters, claimsRequest) {\n    var eQParams = __assign({}, extraQueryParameters);\n\n    if (!eQParams) {\n      return null;\n    }\n\n    if (claimsRequest) {\n      // this.logger.warning(\"Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.\");\n      delete eQParams[Constants.claims];\n    }\n\n    BlacklistedEQParams.forEach(function (param) {\n      if (eQParams[param]) {\n        // this.logger.warning(\"Removed duplicate \" + param + \" from extraQueryParameters. Please use the \" + param + \" field in request object.\");\n        delete eQParams[param];\n      }\n    });\n    return eQParams;\n  };\n  /**\n   * @ignore\n   *\n   * Validates the claims passed in request is a JSON\n   * TODO: More validation will be added when the server team tells us how they have actually implemented claims\n   * @param claimsRequest\n   */\n\n\n  RequestUtils.validateClaimsRequest = function (claimsRequest) {\n    if (!claimsRequest) {\n      return;\n    }\n\n    try {\n      JSON.parse(claimsRequest);\n    } catch (e) {\n      throw ClientConfigurationError.createClaimsRequestParsingError(e);\n    }\n  };\n  /**\n   * @ignore\n   *\n   * generate unique state per request\n   * @param userState User-provided state value\n   * @returns State string include library state and user state\n   */\n\n\n  RequestUtils.validateAndGenerateState = function (userState, interactionType) {\n    return !StringUtils.isEmpty(userState) ? \"\" + RequestUtils.generateLibraryState(interactionType) + Constants.resourceDelimiter + userState : RequestUtils.generateLibraryState(interactionType);\n  };\n  /**\n   * Generates the state value used by the library.\n   *\n   * @returns Base64 encoded string representing the state\n   */\n\n\n  RequestUtils.generateLibraryState = function (interactionType) {\n    var stateObject = {\n      id: CryptoUtils.createNewGuid(),\n      ts: TimeUtils.now(),\n      method: interactionType\n    };\n    var stateString = JSON.stringify(stateObject);\n    return CryptoUtils.base64Encode(stateString);\n  };\n  /**\n   * Decodes the state value into a StateObject\n   *\n   * @param state State value returned in the request\n   * @returns Parsed values from the encoded state value\n   */\n\n\n  RequestUtils.parseLibraryState = function (state) {\n    var libraryState = decodeURIComponent(state).split(Constants.resourceDelimiter)[0];\n\n    if (CryptoUtils.isGuid(libraryState)) {\n      // If state is guid, assume timestamp is now and is redirect, as redirect should be only method where this can happen.\n      return {\n        id: libraryState,\n        ts: TimeUtils.now(),\n        method: Constants.interactionTypeRedirect\n      };\n    }\n\n    try {\n      var stateString = CryptoUtils.base64Decode(libraryState);\n      var stateObject = JSON.parse(stateString);\n      return stateObject;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, null);\n    }\n  };\n  /**\n   * @ignore\n   *\n   * validate correlationId and generate if not valid or not set by the user\n   * @param correlationId\n   */\n\n\n  RequestUtils.validateAndGenerateCorrelationId = function (correlationId) {\n    // validate user set correlationId or set one for the user if null\n    if (correlationId && !CryptoUtils.isGuid(correlationId)) {\n      throw ClientConfigurationError.createInvalidCorrelationIdError();\n    }\n\n    return CryptoUtils.isGuid(correlationId) ? correlationId : CryptoUtils.createNewGuid();\n  };\n  /**\n   * Create a request signature\n   * @param request\n   */\n\n\n  RequestUtils.createRequestSignature = function (request) {\n    return \"\" + request.scopes.join(\" \").toLowerCase() + Constants.resourceDelimiter + request.authority;\n  };\n\n  return RequestUtils;\n}();\n\nexport { RequestUtils };","map":null,"metadata":{},"sourceType":"module"}