{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __assign } from \"tslib\";\nimport { TELEMETRY_BLOB_EVENT_NAMES, EVENT_NAME_KEY, START_TIME_KEY, ELAPSED_TIME_KEY } from \"./TelemetryConstants\";\nimport { prependEventNamePrefix, startBrowserPerformanceMeasurement, endBrowserPerformanceMeasurement } from \"./TelemetryUtils\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\n\nvar TelemetryEvent =\n/** @class */\nfunction () {\n  function TelemetryEvent(eventName, correlationId, eventLabel) {\n    var _a;\n\n    this.eventId = CryptoUtils.createNewGuid();\n    this.label = eventLabel;\n    this.event = (_a = {}, _a[prependEventNamePrefix(EVENT_NAME_KEY)] = eventName, _a[prependEventNamePrefix(ELAPSED_TIME_KEY)] = -1, _a[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = correlationId, _a);\n  }\n\n  TelemetryEvent.prototype.setElapsedTime = function (time) {\n    this.event[prependEventNamePrefix(ELAPSED_TIME_KEY)] = time;\n  };\n\n  TelemetryEvent.prototype.stop = function () {\n    // Set duration of event\n    this.setElapsedTime(+Date.now() - +this.startTimestamp);\n    endBrowserPerformanceMeasurement(this.displayName, this.perfStartMark, this.perfEndMark);\n  };\n\n  TelemetryEvent.prototype.start = function () {\n    this.startTimestamp = Date.now();\n    this.event[prependEventNamePrefix(START_TIME_KEY)] = this.startTimestamp;\n    startBrowserPerformanceMeasurement(this.perfStartMark);\n  };\n\n  Object.defineProperty(TelemetryEvent.prototype, \"telemetryCorrelationId\", {\n    get: function get() {\n      return this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey];\n    },\n    set: function set(value) {\n      this.event[\"\" + TELEMETRY_BLOB_EVENT_NAMES.MsalCorrelationIdConstStrKey] = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"eventName\", {\n    get: function get() {\n      return this.event[prependEventNamePrefix(EVENT_NAME_KEY)];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TelemetryEvent.prototype.get = function () {\n    return __assign(__assign({}, this.event), {\n      eventId: this.eventId\n    });\n  };\n\n  Object.defineProperty(TelemetryEvent.prototype, \"key\", {\n    get: function get() {\n      return this.telemetryCorrelationId + \"_\" + this.eventId + \"-\" + this.eventName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"displayName\", {\n    get: function get() {\n      return \"Msal-\" + this.label + \"-\" + this.telemetryCorrelationId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"perfStartMark\", {\n    get: function get() {\n      return \"start-\" + this.key;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TelemetryEvent.prototype, \"perfEndMark\", {\n    get: function get() {\n      return \"end-\" + this.key;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TelemetryEvent;\n}();\n\nexport default TelemetryEvent;","map":null,"metadata":{},"sourceType":"module"}