{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter, __generator } from \"tslib\";\n/**\n * @hidden\n */\n\nimport { Authority } from \"./Authority\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n\n  AuthorityFactory.saveMetadataFromNetwork = function (authorityInstance, telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , authorityInstance.resolveEndpointsAsync(telemetryManager, correlationId)];\n\n          case 1:\n            metadata = _a.sent();\n            this.metadataMap.set(authorityInstance.CanonicalAuthority, metadata);\n            return [2\n            /*return*/\n            , metadata];\n        }\n      });\n    });\n  };\n\n  AuthorityFactory.getMetadata = function (authorityUrl) {\n    return this.metadataMap.get(authorityUrl);\n  };\n\n  AuthorityFactory.saveMetadataFromConfig = function (authorityUrl, authorityMetadataJson) {\n    try {\n      if (authorityMetadataJson) {\n        var parsedMetadata = JSON.parse(authorityMetadataJson);\n\n        if (!parsedMetadata.authorization_endpoint || !parsedMetadata.end_session_endpoint || !parsedMetadata.issuer) {\n          throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n        }\n\n        this.metadataMap.set(authorityUrl, {\n          AuthorizationEndpoint: parsedMetadata.authorization_endpoint,\n          EndSessionEndpoint: parsedMetadata.end_session_endpoint,\n          Issuer: parsedMetadata.issuer\n        });\n      }\n    } catch (e) {\n      throw ClientConfigurationError.createInvalidAuthorityMetadataError();\n    }\n  };\n  /**\n   * Create an authority object of the correct type based on the url\n   * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\n   */\n\n\n  AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority, authorityMetadata) {\n    if (StringUtils.isEmpty(authorityUrl)) {\n      return null;\n    }\n\n    if (authorityMetadata) {\n      // todo: log statements\n      this.saveMetadataFromConfig(authorityUrl, authorityMetadata);\n    }\n\n    return new Authority(authorityUrl, validateAuthority, this.metadataMap.get(authorityUrl));\n  };\n\n  AuthorityFactory.metadataMap = new Map();\n  return AuthorityFactory;\n}();\n\nexport { AuthorityFactory };","map":null,"metadata":{},"sourceType":"module"}