{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __awaiter, __generator } from \"tslib\";\nimport { XhrClient } from \"../XHRClient\";\nimport { AAD_INSTANCE_DISCOVERY_ENDPOINT, NetworkRequestType } from \"../utils/Constants\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\n\nvar TrustedAuthority =\n/** @class */\nfunction () {\n  function TrustedAuthority() {}\n  /**\n   *\n   * @param validateAuthority\n   * @param knownAuthorities\n   */\n\n\n  TrustedAuthority.setTrustedAuthoritiesFromConfig = function (validateAuthority, knownAuthorities) {\n    if (validateAuthority && !this.getTrustedHostList().length) {\n      knownAuthorities.forEach(function (authority) {\n        TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\n      });\n    }\n  };\n  /**\n   *\n   * @param telemetryManager\n   * @param correlationId\n   */\n\n\n  TrustedAuthority.getAliases = function (authorityToVerify, telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client, httpMethod, instanceDiscoveryEndpoint, httpEvent;\n      return __generator(this, function (_a) {\n        client = new XhrClient();\n        httpMethod = NetworkRequestType.GET;\n        instanceDiscoveryEndpoint = \"\" + AAD_INSTANCE_DISCOVERY_ENDPOINT + authorityToVerify + \"oauth2/v2.0/authorize\";\n        httpEvent = telemetryManager.createAndStartHttpEvent(correlationId, httpMethod, instanceDiscoveryEndpoint, \"getAliases\");\n        return [2\n        /*return*/\n        , client.sendRequestAsync(instanceDiscoveryEndpoint, httpMethod, true).then(function (response) {\n          httpEvent.httpResponseStatus = response.statusCode;\n          telemetryManager.stopEvent(httpEvent);\n          return response.body[\"metadata\"];\n        }).catch(function (err) {\n          httpEvent.serverErrorCode = err;\n          telemetryManager.stopEvent(httpEvent);\n          throw err;\n        })];\n      });\n    });\n  };\n  /**\n   *\n   * @param telemetryManager\n   * @param correlationId\n   */\n\n\n  TrustedAuthority.setTrustedAuthoritiesFromNetwork = function (authorityToVerify, telemetryManager, correlationId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, host;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getAliases(authorityToVerify, telemetryManager, correlationId)];\n\n          case 1:\n            metadata = _a.sent();\n            metadata.forEach(function (entry) {\n              var authorities = entry[\"aliases\"];\n              authorities.forEach(function (authority) {\n                TrustedAuthority.TrustedHostList.push(authority.toLowerCase());\n              });\n            });\n            host = UrlUtils.GetUrlComponents(authorityToVerify).HostNameAndPort;\n\n            if (TrustedAuthority.getTrustedHostList().length && !TrustedAuthority.IsInTrustedHostList(host)) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\n              TrustedAuthority.TrustedHostList.push(host.toLowerCase());\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  TrustedAuthority.getTrustedHostList = function () {\n    return this.TrustedHostList;\n  };\n  /**\n   * Checks to see if the host is in a list of trusted hosts\n   * @param host\n   */\n\n\n  TrustedAuthority.IsInTrustedHostList = function (host) {\n    return this.TrustedHostList.indexOf(host.toLowerCase()) > -1;\n  };\n\n  TrustedAuthority.TrustedHostList = [];\n  return TrustedAuthority;\n}();\n\nexport { TrustedAuthority };","map":null,"metadata":{},"sourceType":"module"}