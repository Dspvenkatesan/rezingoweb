{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ScopeSet } from \"../ScopeSet\";\nimport { UrlUtils } from \"./UrlUtils\";\n/**\n * @hidden\n */\n\nvar AuthCacheUtils =\n/** @class */\nfunction () {\n  function AuthCacheUtils() {}\n\n  AuthCacheUtils.filterTokenCacheItemsByScope = function (tokenCacheItems, requestScopes) {\n    return tokenCacheItems.filter(function (cacheItem) {\n      var cachedScopes = cacheItem.key.scopes.split(\" \");\n      var searchScopes = ScopeSet.removeDefaultScopes(requestScopes); // If requestScopes contain only default scopes search for default scopes otherwise search for everything but default scopes\n\n      return searchScopes.length === 0 ? ScopeSet.containsScope(cachedScopes, requestScopes) : ScopeSet.containsScope(cachedScopes, searchScopes);\n    });\n  };\n\n  AuthCacheUtils.filterTokenCacheItemsByAuthority = function (tokenCacheItems, authority) {\n    return tokenCacheItems.filter(function (cacheItem) {\n      return UrlUtils.CanonicalizeUri(cacheItem.key.authority) === authority;\n    });\n  };\n\n  AuthCacheUtils.filterTokenCacheItemsByDomain = function (tokenCacheItems, requestDomain) {\n    return tokenCacheItems.filter(function (cacheItem) {\n      var cacheItemDomain = UrlUtils.GetUrlComponents(cacheItem.key.authority).HostNameAndPort;\n      return cacheItemDomain === requestDomain;\n    });\n  };\n\n  return AuthCacheUtils;\n}();\n\nexport { AuthCacheUtils };","map":null,"metadata":{},"sourceType":"module"}