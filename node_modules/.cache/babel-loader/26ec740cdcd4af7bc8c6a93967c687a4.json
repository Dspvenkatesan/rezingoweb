{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { TENANT_PLACEHOLDER, EVENT_NAME_PREFIX } from \"./TelemetryConstants\";\nimport { CryptoUtils } from \"../utils/CryptoUtils\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\nimport { Authority } from \"../authority/Authority\";\nexport var scrubTenantFromUri = function scrubTenantFromUri(uri) {\n  var url = UrlUtils.GetUrlComponents(uri); // validate trusted host\n\n  if (Authority.isAdfs(uri)) {\n    /**\n     * returning what was passed because the library needs to work with uris that are non\n     * AAD trusted but passed by users such as B2C or others.\n     * HTTP Events for instance can take a url to the open id config endpoint\n     */\n    return uri;\n  }\n\n  var pathParams = url.PathSegments;\n\n  if (pathParams && pathParams.length >= 2) {\n    var tenantPosition = pathParams[1] === \"tfp\" ? 2 : 1;\n\n    if (tenantPosition < pathParams.length) {\n      pathParams[tenantPosition] = TENANT_PLACEHOLDER;\n    }\n  }\n\n  return url.Protocol + \"//\" + url.HostNameAndPort + \"/\" + pathParams.join(\"/\");\n};\nexport var hashPersonalIdentifier = function hashPersonalIdentifier(valueToHash) {\n  /*\n   * TODO sha256 this\n   * Current test runner is being funny with node libs that are webpacked anyway\n   * need a different solution\n   */\n  return CryptoUtils.base64Encode(valueToHash);\n};\nexport var prependEventNamePrefix = function prependEventNamePrefix(suffix) {\n  return \"\" + EVENT_NAME_PREFIX + (suffix || \"\");\n};\nexport var supportsBrowserPerformance = function supportsBrowserPerformance() {\n  return !!(typeof window !== \"undefined\" && \"performance\" in window && window.performance.mark && window.performance.measure);\n};\nexport var endBrowserPerformanceMeasurement = function endBrowserPerformanceMeasurement(measureName, startMark, endMark) {\n  if (supportsBrowserPerformance()) {\n    window.performance.mark(endMark);\n    window.performance.measure(measureName, startMark, endMark);\n    window.performance.clearMeasures(measureName);\n    window.performance.clearMarks(startMark);\n    window.performance.clearMarks(endMark);\n  }\n};\nexport var startBrowserPerformanceMeasurement = function startBrowserPerformanceMeasurement(startMark) {\n  if (supportsBrowserPerformance()) {\n    window.performance.mark(startMark);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}