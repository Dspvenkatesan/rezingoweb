{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { __extends } from \"tslib\";\nimport TelemetryEvent from \"./TelemetryEvent\";\nimport { scrubTenantFromUri, prependEventNamePrefix } from \"./TelemetryUtils\";\nimport { ServerRequestParameters } from \"../ServerRequestParameters\";\nexport var EVENT_KEYS = {\n  HTTP_PATH: prependEventNamePrefix(\"http_path\"),\n  USER_AGENT: prependEventNamePrefix(\"user_agent\"),\n  QUERY_PARAMETERS: prependEventNamePrefix(\"query_parameters\"),\n  API_VERSION: prependEventNamePrefix(\"api_version\"),\n  RESPONSE_CODE: prependEventNamePrefix(\"response_code\"),\n  O_AUTH_ERROR_CODE: prependEventNamePrefix(\"oauth_error_code\"),\n  HTTP_METHOD: prependEventNamePrefix(\"http_method\"),\n  REQUEST_ID_HEADER: prependEventNamePrefix(\"request_id_header\"),\n  SPE_INFO: prependEventNamePrefix(\"spe_info\"),\n  SERVER_ERROR_CODE: prependEventNamePrefix(\"server_error_code\"),\n  SERVER_SUB_ERROR_CODE: prependEventNamePrefix(\"server_sub_error_code\"),\n  URL: prependEventNamePrefix(\"url\")\n};\n\nvar HttpEvent =\n/** @class */\nfunction (_super) {\n  __extends(HttpEvent, _super);\n\n  function HttpEvent(correlationId, eventLabel) {\n    return _super.call(this, prependEventNamePrefix(\"http_event\"), correlationId, eventLabel) || this;\n  }\n\n  Object.defineProperty(HttpEvent.prototype, \"url\", {\n    set: function set(url) {\n      var scrubbedUri = scrubTenantFromUri(url);\n      this.event[EVENT_KEYS.URL] = scrubbedUri && scrubbedUri.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"httpPath\", {\n    set: function set(httpPath) {\n      this.event[EVENT_KEYS.HTTP_PATH] = scrubTenantFromUri(httpPath).toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"userAgent\", {\n    set: function set(userAgent) {\n      this.event[EVENT_KEYS.USER_AGENT] = userAgent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"queryParams\", {\n    set: function set(queryParams) {\n      this.event[EVENT_KEYS.QUERY_PARAMETERS] = ServerRequestParameters.generateQueryParametersString(queryParams);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"apiVersion\", {\n    set: function set(apiVersion) {\n      this.event[EVENT_KEYS.API_VERSION] = apiVersion.toLowerCase();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"httpResponseStatus\", {\n    set: function set(statusCode) {\n      this.event[EVENT_KEYS.RESPONSE_CODE] = statusCode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"oAuthErrorCode\", {\n    set: function set(errorCode) {\n      this.event[EVENT_KEYS.O_AUTH_ERROR_CODE] = errorCode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"httpMethod\", {\n    set: function set(httpMethod) {\n      this.event[EVENT_KEYS.HTTP_METHOD] = httpMethod;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"requestIdHeader\", {\n    set: function set(requestIdHeader) {\n      this.event[EVENT_KEYS.REQUEST_ID_HEADER] = requestIdHeader;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"speInfo\", {\n    /**\n     * Indicates whether the request was executed on a ring serving SPE traffic.\n     * An empty string indicates this occurred on an outer ring, and the string \"I\"\n     * indicates the request occurred on the inner ring\n     */\n    set: function set(speInfo) {\n      this.event[EVENT_KEYS.SPE_INFO] = speInfo;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"serverErrorCode\", {\n    set: function set(errorCode) {\n      this.event[EVENT_KEYS.SERVER_ERROR_CODE] = errorCode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(HttpEvent.prototype, \"serverSubErrorCode\", {\n    set: function set(subErrorCode) {\n      this.event[EVENT_KEYS.SERVER_SUB_ERROR_CODE] = subErrorCode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return HttpEvent;\n}(TelemetryEvent);\n\nexport default HttpEvent;","map":null,"metadata":{},"sourceType":"module"}